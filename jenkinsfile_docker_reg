pipeline {
  // Some global default variables
  environment {
        DOCKERHUB_CREDS = credentials('dockerhub')
  }

  // Some parameters

  parameters {
        string (name: 'DOCKER_REG',       defaultValue: 'ovh35',                   description: 'Docker registry')
        string (name: 'IMAGE_NAME',       defaultValue: 'training-app',            description: 'Docker Image Name')
        string (name: 'IMAGE_TAG',        defaultValue: 'v1.1',                    description: 'Docker Image tag')
        string (name: 'PHPMYADMIN_PORT',  defaultValue: '8090',                    description: 'PHPMyAdmin Port')
  }

  tools {
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        maven "maven"
  }

  agent any

  stages {
    stage('Build & Sonakube analysis') {
      steps {
      // Run the maven build
         withSonarQubeEnv('sonarkube') {
           sh "mvn -B -DskipTests -Dmaven.test.failure.ignore clean package sonar:sonar"
         }
      }
     }

    stage("Quality Gate") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    
    stage('Unit Test') {
      steps {
         sh "mvn test"
      }
    }

    stage('Results') {
      steps {
      junit '**/target/surefire-reports/TEST-*.xml'
      archiveArtifacts  'target/*.jar'
      }
    }


    stage('Build Docker Maven Image') {
      steps {
        // Run the docker build command
        echo "Build Docker Image Of Training-App"
        sh "docker build -t=\"${IMAGE_NAME}:${IMAGE_TAG}\" ."
      }  
    }

    stage('Push Images To DockerHUb') {
      steps {
        //Run docker push command
        echo "Login to Docker HUB"
        sh "docker login --username $DOCKERHUB_CREDS_USR --password $DOCKERHUB_CREDS_PSW"
        echo "Push App Image vers DockerHUb"
        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REG}/${IMAGE_NAME}:${IMAGE_TAG}"
        sh "docker push ${DOCKER_REG}/${IMAGE_NAME}:${IMAGE_TAG}"
      }
    }

    stage('Deploy App') {
      steps {
         // Run the docker compose up command
        echo "docker compose up -d"
        sh "DOCKER_REG=$DOCKER_REG IMAGE_NAME=$IMAGE_NAME BUILD_TAG=$IMAGE_TAG PHPMYADMIN_PORT=$PHPMYADMIN_PORT docker compose up -d"
        sh "docker logs training-app-jenkinsfile2-app-1"
      }
    }
    stage('Undeploy App') {
      steps {
         // Run the docker compose down command
        echo "docker compose down"
        sh "DOCKER_REG=$DOCKER_REG IMAGE_NAME=$IMAGE_NAME BUILD_TAG=$IMAGE_TAG PHPMYADMIN_PORT=$PHPMYADMIN_PORT docker compose down"
      }
    }
  }
}
